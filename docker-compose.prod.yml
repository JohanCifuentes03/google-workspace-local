# Docker Compose para producción
# Uso: docker-compose -f docker-compose.prod.yml up -d

networks:
  mcp-network:
    driver: bridge

services:
  redis:
    image: redis:7-alpine
    container_name: mcp-redis-prod
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - mcp-network
    restart: always
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 64M

  backend:
    image: mcp-backend:latest
    container_name: mcp-backend-prod
    env_file:
      - ./backend/.env.prod
    environment:
      - REDIS_URL=redis://redis:6379
      - NODE_ENV=production
      - PORT=3000
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/status/test"]
      interval: 60s
      timeout: 15s
      retries: 3
      start_period: 60s
    networks:
      - mcp-network
    restart: always
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  frontend:
    image: mcp-frontend:latest
    container_name: mcp-frontend-prod
    environment:
      - VITE_API_URL=http://localhost:3000
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5173"]
      interval: 60s
      timeout: 15s
      retries: 3
      start_period: 45s
    networks:
      - mcp-network
    restart: always
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

volumes:
  redis_data:
# Configuración para despliegue en swarm (opcional)
# Para usar con: docker stack deploy -c docker-compose.prod.yml mcp
# x-swarm-config:
#   replicas: 2
#   placement:
#     constraints:
#       - node.role == worker
